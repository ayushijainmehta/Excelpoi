package exceltry;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.Properties;
import java.util.Scanner;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Main {
	static int no_of_columns=0;
	static int rowIndex=0;
	public static void main(String s[]) throws IOException, InvalidFormatException
	{
		Properties p=new Properties();  
		Scanner sc=new Scanner(System.in);
		String name,separator;
		System.out.print("Enter input file path and name:");
		String filepath = sc.next();
		int loc=filepath.lastIndexOf('\\');
		String sheetName=filepath.substring(loc+1);
	    System.out.print("Enter the separator");
		separator=sc.next();
		String separatorPattern="["+separator+"]";
		String TextfileName = filepath+".txt";
		String excelFileName = filepath+".xlsx";
        int i=0,index=0;
        XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet sheet = workbook.createSheet(sheetName);
		XSSFFont font=workbook.createFont();
		XSSFFont font1=workbook.createFont();
		XSSFCellStyle style=workbook.createCellStyle();
		CellStyle style1=workbook.createCellStyle();
		CellStyle style2=workbook.createCellStyle();
		font.setBold(true);
	    style.setFont(font);
		style1.setWrapText(true);
		//font1.setColor(HSSFColor.RED.index);
		style2.setFont(font1);
		System.out.print("enter comment to be entered");
   	    sc.nextLine();
   	    String Comments=sc.nextLine();
		try (BufferedReader br = new BufferedReader(new FileReader(TextfileName))) {
		    String line;
		    Row row;
		    Cell cell;
		    
	        while ((line = br.readLine()) != null) {
		    	i=0;
		        row = sheet.createRow(rowIndex);
		        String[] tokens = line.split(separatorPattern);
		        if(rowIndex==0)
		       {
		         cell = row.createCell(tokens.length+1);
		         cell.setCellStyle(style1);
	        	 cell.setCellStyle(style);
		         cell.setCellStyle(style2);
	        	 cell.setCellValue("Comments");
	        	cell = row.createCell(i);
		         cell.setCellStyle(style1);
	        	 cell.setCellStyle(style);
	             cell.setCellValue("Index"); 
		       }
		       else
		       {
		    	   cell = row.createCell(tokens.length+1);
		           cell.setCellStyle(style1);
		           cell.setCellValue(Comments);
			       cell = row.createCell(i);
		           cell.setCellStyle(style1);
				   cell.setCellValue(index);
		       }
		      i++;
		      index++;
		       for(int iToken = 0; iToken <tokens.length; iToken++) 
		       {
		            cell = row.createCell(i);
		            if(rowIndex==0)
		            {
		                 cell.setCellStyle(style1);
			        	 cell.setCellStyle(style);
		            }
		            else
		            {
		            	 cell.setCellStyle(style);
		            	 cell.setCellStyle(style1);
		            }
		            cell.setCellValue(tokens[iToken]);
		            i++; 
		        }
		       rowIndex++;
		         }
		} 
		catch(Exception e) 
		{
		    e.printStackTrace();
		}
	
		Iterator <Row> itr=sheet.rowIterator();
		
		int columncount=1;
		Row row;
		if(itr.hasNext())
		{
			row=(Row)itr.next();
			no_of_columns=row.getPhysicalNumberOfCells();
		}
		
		System.out.println("no_of_columns"+no_of_columns);
		System.out.println("row"+rowIndex);
		for(int j=0;j<no_of_columns;j++)
		{
			System.out.print("Enter width of "+columncount+"st  column");
			columncount++;
	        int width=sc.nextInt();
	        sheet.setColumnWidth(j, width);	
		}
		FileOutputStream outputStream = new FileOutputStream(excelFileName);
		    workbook.write(outputStream);	
		   
		    i=0;
		    outputStream.close();
		    String Values[][]=new String[rowIndex][no_of_columns];
	String keys[]=new String[no_of_columns];	   
 InputStream inp = new FileInputStream(excelFileName); 
    Workbook wb = WorkbookFactory.create(inp);  
    XSSFSheet sheet1 =  (XSSFSheet) wb.getSheetAt(0);
    int rowCount=0;
    for(rowCount=0;rowCount<rowIndex;rowCount++)
    {
    for(int column=1;column<no_of_columns;column++)
    {
    Row row1 =  sheet1.getRow(rowCount);  
  Cell cell = row1.getCell(column); 
    if(rowCount==0)
    {
    	keys[column]=cell.getStringCellValue();
        System.out.print(keys[column]);	
    }
    else 
    {
    	Values[rowCount][column]=cell.getStringCellValue();
    	 System.out.print(Values[rowCount][column]);	
    }
    }
    System.out.println();
    }
    String transposeValues[][] = new String[no_of_columns][rowIndex];
    for (int d = 1; d <rowIndex ;d++)
        for (int c = 1; c< no_of_columns; c++)   
         transposeValues[c][d] = Values[d][c];
    Properties prop=new Properties();  
   int k=1;
   String key="",value="";
    for (int d = 1; d <no_of_columns ;d++)
    {
    	value="";
    for (int c = 1; c< rowIndex; c++) 
        {
    	key=keys[k];
    	value=value+transposeValues[d][c]+",";
    }
    value=value.substring(0,value.length()-1);
    prop.setProperty(key,value);
    k++;
        }
      
    prop.store(new FileWriter("Config.properties"),""); 
    
    
}
	}
