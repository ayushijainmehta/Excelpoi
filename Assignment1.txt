package trial;



import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.Scanner;

import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class Excel {
	public static void main(String s[]) throws IOException
	{
		Scanner sc=new Scanner(System.in);
		String name,separator;
		System.out.print("Enter text file name to be converted to excel");
		name=sc.next();
		System.out.print("Enter the separator");
		separator=sc.next();
		String separatorPattern="["+separator+"]";
		String fileName = "./"+name+".txt";
		String excelFileName = "./"+name+".xlsx";
        int i=0,index=0;
        XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet sheet = workbook.createSheet(name);
		XSSFFont font=workbook.createFont();
		XSSFFont font1=workbook.createFont();
		XSSFCellStyle style=workbook.createCellStyle();
		CellStyle style1=workbook.createCellStyle();
		CellStyle style2=workbook.createCellStyle();
		font.setBold(true);
		style.setFont(font);
		style1.setWrapText(true);
		font1.setColor(HSSFColor.RED.index);
		style2.setFont(font1);
		try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
		    String line;
		  
		    Row row;
		    Cell cell;
		    int rowIndex = 0;
		    while ((line = br.readLine()) != null) {
		    	i=0;
		        row = sheet.createRow(rowIndex);
		        
		       String[] tokens = line.split(separatorPattern);
		        if(rowIndex==0)
		        {
		            cell = row.createCell(i);
		            cell.setCellStyle(style1);
		         	 cell.setCellStyle(style);
		            cell.setCellValue("Index"); 
		        }
		       
		        else
		        {
		        	cell = row.createCell(i);
		        	 cell.setCellStyle(style1);
				    cell.setCellValue(index);
		        }
		     i++;
		       for(int iToken = 0; iToken <tokens.length; iToken++) {
		            cell = row.createCell(i);
		            if(rowIndex==0)
		            {
		            	cell.setCellStyle(style1);
			        	
			        	 cell.setCellStyle(style);
		            }
		            else
		            {
		            	 cell.setCellStyle(style);
		            	cell.setCellStyle(style1);
		            }
		            cell.setCellValue(tokens[iToken]);
		            i++;
		            
		        }
		       if(rowIndex==0)
		       {
		       cell = row.createCell(tokens.length+1);
		  	     cell.setCellStyle(style1);
	        	 cell.setCellStyle(style);
	        	 cell.setCellValue("Comments");
		        rowIndex++;
		        index++;
		       }
		       else
		       {
		    	   System.out.print("enter comment to be entered");
		    	   String Comments=sc.next();
		    	   cell = row.createCell(tokens.length+1);
		        	 cell.setCellStyle(style1);
		        	 cell.setCellStyle(style2);
				    cell.setCellValue(Comments);
			        rowIndex++;
			        index++;  
		       }
		    }
		} catch(Exception e) {
		    e.printStackTrace();
		}
		int no_of_columns=0;
		Iterator itr=sheet.rowIterator();
		int no_of_rows=sheet.getPhysicalNumberOfRows();
		  int columncount=1;
		Row row;
		if(itr.hasNext())
		{
			row=(Row)itr.next();
			no_of_columns=row.getPhysicalNumberOfCells();
		}
		for(int j=0;j<no_of_columns;j++)
		{
			System.out.print("Enter width of "+columncount+"st  column");
	        int width=sc.nextInt();
	        sheet.setColumnWidth(j, width);	
		}
		
		FileOutputStream outputStream = new FileOutputStream(excelFileName);
		    workbook.write(outputStream);	
		
	}

}